---
- name: Get OpenShift information from the first master
  hosts: masters[0]
  gather_facts: false
  tasks:
  - name: see if openshift-logging namespace exists
    command: oc get project openshift-logging -o name
    register: openshiftloggingexists
    ignore_errors: yes
    when: openshift_logging_namespace is not defined

  - name: use openshift-logging as namespace
    set_fact:
      openshift_logging_namespace: "openshift-logging"
    when:
    - openshift_logging_namespace is not defined
    - openshiftloggingexists.rc == 0

  - name: use logging as namespace
    set_fact:
      openshift_logging_namespace: "logging"
    when:
    - openshift_logging_namespace is not defined
    - openshiftloggingexists.rc != 0

  - name: get fluentd secret for kubernetes api
    shell: |
      for name in $( oc get -n {{ openshift_logging_namespace }} sa aggregated-logging-fluentd -o jsonpath='{.secrets[*].name}' ) ; do
        case $name in
        *-fluentd-token-*) echo $name ; break ;;
        esac
      done
    register: fluentdsecret

  - name: get fluentd token
    command: >
      oc extract -n {{ openshift_logging_namespace }} secret/{{ fluentdsecret.stdout }} --keys=token --to=-
    register: fluentdtoken

  - name: get fluentd CA cert for k8s
    command: >
      oc extract -n {{ openshift_logging_namespace }} secret/{{ fluentdsecret.stdout }} --keys=ca.crt --to=-
    register: fluentdcak8s

  - name: get fluentd CA cert for ES
    command: >
      oc extract -n {{ openshift_logging_namespace }} secret/logging-fluentd --keys=ca --to=-
    register: fluentdcaes

  - name: get fluentd client cert for ES
    command: >
      oc extract -n {{ openshift_logging_namespace }} secret/logging-fluentd --keys=cert --to=-
    register: fluentdcert

  - name: get fluentd client key for ES
    command: >
      oc extract -n {{ openshift_logging_namespace }} secret/logging-fluentd --keys=key --to=-
    register: fluentdkey

  - name: get es ip addr
    command: >
      oc get -n {{ openshift_logging_namespace }} service logging-es -o jsonpath='{.spec.clusterIP}'
    register: esip
    when: elasticsearch_server_host is not defined

  - name: get es-ops ip addr
    command: >
      oc get -n {{ openshift_logging_namespace }} service logging-es-ops -o jsonpath='{.spec.clusterIP}'
    register: esopsip
    when:
    - elasticsearch_ops_server_host is not defined
    - openshift_logging_use_ops | default(False)

  - name: set facts for nodes
    set_fact:
      fluentdtoken: "{{ fluentdtoken.stdout }}"
      fluentdcak8s: "{{ fluentdcak8s.stdout }}"
      fluentdcaes: "{{ fluentdcaes.stdout }}"
      fluentdcert: "{{ fluentdcert.stdout }}"
      fluentdkey: "{{ fluentdkey.stdout }}"
      esip: "{{ esip.stdout | default('') }}"
      esopsip: "{{ esopsip.stdout | default('') }}"

- name: install and configure rsyslog on the nodes
  hosts: nodes
  gather_facts: true
  tasks:
  - set_fact:
      rsyslog_image_prefix: "viaq/"
      when: rsyslog_image_prefix is not defined

  - set_fact:
      rsyslog_image_version: "latest"
      when: rsyslog_image_version is not defined

  - name: get rsyslog image
    command: docker pull {{ rsyslog_image_prefix }}rsyslog:{{ rsyslog_image_version }}
    when: use_rsyslog_image | default(False)

  - name: install prereqs
    yum: state=latest name={{ item }}
    with_items:
    - nmap-ncat
    - systemd-python
    - policycoreutils
    - checkpolicy
    - policycoreutils-python

  - name: install rsyslog packages
    yum: state=latest name={{ item }}
    with_items:
    - rsyslog
    - rsyslog-mmkubernetes
    - rsyslog-elasticsearch
    - rsyslog-mmjsonparse
    - rsyslog-mmnormalize
    - libfastjson
    when: not use_rsyslog_image | default(False)

  - name: create rsyslog viaq subdir
    file: path=/etc/rsyslog.d/viaq state=directory mode=0700

  - name: install token file
    copy: content={{ hostvars[groups['masters'][0]]['fluentdtoken'] }} dest=/etc/rsyslog.d/viaq/mmk8s.token mode=0400

  - name: install CA cert file
    copy: content={{ hostvars[groups['masters'][0]]['fluentdcak8s'] }} dest=/etc/rsyslog.d/viaq/mmk8s.ca.crt mode=0400

  - name: install template config files
    template: src={{ item }}.j2 dest=/etc/rsyslog.d/viaq/{{ item }} mode=0400
    with_items:
    - mmk8s.conf

  - name: install ES CA cert file
    copy: content={{ hostvars[groups['masters'][0]]['fluentdcaes'] }} dest=/etc/rsyslog.d/viaq/es-ca.crt mode=0400

  - name: install ES client cert file
    copy: content={{ hostvars[groups['masters'][0]]['fluentdcert'] }} dest=/etc/rsyslog.d/viaq/es-cert.pem mode=0400

  - name: install ES client key file
    copy: content={{ hostvars[groups['masters'][0]]['fluentdkey'] }} dest=/etc/rsyslog.d/viaq/es-key.pem mode=0400

  - name: setup host alias for es ip
    shell: |
      if grep -q '^{{ hostvars[groups['masters'][0]]['esip'] }} .* logging-es$' ; then
        echo already have alias logging-es for {{ hostvars[groups['masters'][0]]['esip'] }}
      else
        sudo sed -i '/^{{ hostvars[groups['masters'][0]]['esip'] }}/d' /etc/hosts
        sudo sed -i '/ logging-es$/d' /etc/hosts
        echo {{ hostvars[groups['masters'][0]]['esip'] }} logging-es | sudo tee -a /etc/hosts
      fi
    when: elasticsearch_server_host is not defined

  - name: setup host alias for es-ops ip
    shell: |
      if grep -q '^{{ hostvars[groups['masters'][0]]['esopsip'] }} .* logging-es-ops$' ; then
        echo already have alias logging-es-ops for {{ hostvars[groups['masters'][0]]['esopsip'] }}
      else
        sudo sed -i '/^{{ hostvars[groups['masters'][0]]['esopsip'] }}/d' /etc/hosts
        sudo sed -i '/ logging-es-ops$/d' /etc/hosts
        echo {{ hostvars[groups['masters'][0]]['esopsip'] }} logging-es-ops | sudo tee -a /etc/hosts
      fi
    when:
    - elasticsearch_ops_server_host is not defined
    - openshift_logging_use_ops | default(False)

  - name: install template config files
    template: src={{ item }}.j2 dest=/etc/rsyslog.d/viaq/{{ item }} mode=0400
    with_items:
    - elasticsearch.conf

  - name: install config files
    copy: src={{ item }} dest=/etc/rsyslog.d/viaq/{{ item }} mode=0400
    with_items:
    - normalize_level.json
    - prio_to_level.json
    - viaq_formatting.conf
    - k8s_filename.rulebase
    - k8s_container_name.rulebase
    - parse_json.rulebase

  - name: install main viaq config file
    copy: src={{ item }} dest=/etc/rsyslog.d/{{ item }} mode=0400
    with_items:
    - viaq_main.conf

  - name: copy selinux policy files
    copy: src={{ item }} dest=/root/ mode=0400
    with_items:
    - rsyslog2k8s.te
    - rsyslog2es.te
    - varlibdockercont.te
    - rsyslogaccessnssdb.te
    - rsyslogvar.te

  - name: build policy
    shell: |
      cd /root
      sysmods=$( semodule -l | awk '{print $1}' )
      for mod in varlibdockercont rsyslog2k8s rsyslogaccessnssdb rsyslog2es rsyslogvar ; do
        if echo "$sysmods" | grep -q $mod ; then
          echo using existing selinux module $mod
        elif [ -f ${mod}.te ] ; then
          checkmodule -M -m -o ${mod}.mod ${mod}.te
          semodule_package -o ${mod}.pp -m ${mod}.mod
          semodule -i ${mod}.pp
        fi
      done

  # openshift devenv is very noisy - need to increase rsyslog limits for imjournal
  - name: Update rsyslog.conf imjournal
    lineinfile:
      dest: /etc/rsyslog.conf
      regexp: '^(\$ModLoad imjournal|module\(load="imjournal")'
      line: 'module(load="imjournal" StateFile="imjournal.state" UsePidFromSystem="on" RateLimit.Burst="{{ imjournal_ratelimit_burst|default(1000000) }}" RateLimit.Interval="{{ imjournal_ratelimit_interval|default(10) }}" PersistStateInterval="1000")'
      backup: yes

  - name: Comment out rsyslog.conf IMJournalStateFile
    lineinfile:
      dest: /etc/rsyslog.conf
      regexp: '^\$IMJournalStateFile|^#\$IMJournalStateFile'
      line: '#$IMJournalStateFile imjournal.state'

  - name: disable rsyslog
    systemd:
      name: rsyslog.service
      enabled: no
      state: stopped
    when: use_rsyslog_image | default(False)

  - name: install rsyslog container systemd service
    template: src=rsyslog-container.service.j2 dest=/usr/lib/systemd/system/rsyslog-container.service mode=0400
    when: use_rsyslog_image | default(False)

  - name: enable and run rsyslog-container.service
    systemd:
      name: rsyslog-container.service
      daemon_reload: yes
      enabled: yes
      state: started
    when: use_rsyslog_image | default(False)

  - name: reload and restart rsyslog.service
    systemd:
      name: rsyslog.service
      daemon_reload: yes
      enabled: yes
      state: restarted
    when: not use_rsyslog_image | default(False)
